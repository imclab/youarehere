<?
	#
	# $Id$
	#

	$GLOBALS['cfg'] = array();

	#
	# Things you may want to change in a hurry
	#

	$GLOBALS['cfg']['site_name'] = 'flamework';
	$GLOBALS['cfg']['environment'] = 'dev';

	$GLOBALS['cfg']['site_disabled'] = 0;
	$GLOBALS['cfg']['site_disabled_retry_after'] = 0;	# seconds; if set will return HTTP Retry-After header

	# Message is displayed in the nav header in inc_head.txt

	$GLOBALS['cfg']['display_message'] = 0;
	$GLOBALS['cfg']['display_message_text'] = '';

	# Twitter OAuth stuff

	$GLOBALS['cfg']['twitter_oauth_key'] = '';
	$GLOBALS['cfg']['twitter_oauth_secret'] = '';	
	$GLOBALS['cfg']['crypto_oauth_cookie_secret'] = '';	# (see notes in www/sign_oauth.php)
	$GLOBALS['cfg']['twitter_api_perms'] = 'read';

	# Reverse geocoder stuff

	# The things doing the actual reverse geocoding. This is still
	# a bit of a moving target. See also:
	# https://github.com/straup/flickrgeocoder-java

	# Port numbers can be whatever but I like to bind them to the
	# corresponding WOE place type ID (20130223/straup)

	$GLOBALS['cfg']['reverse_geocode_endpoints'] = array(
		'neighbourhoods' => array('http://localhost:9022'),
		'localities' => array('http://localhost:9007'),
		'aerotropolii' => array('http://localhost:9099'),
		'regions' => array('http://localhost:9008'),
		'countries' => array('http://localhost:9012'),
	);

	$GLOBALS['cfg']['reverse_geocode_fallbacks'] = array(
		'neighbourhoods' => 'localities',
		'localities' => null,
		# 'localities' => 'aerotropolii',
		# 'aerotropolii' => 'regions'
		# 'regions' => 'countries'
	);

	$GLOBALS['cfg']['reverse_geocode_sources'] = array(
		0 => 'unknown',	 # this shouldn't happen but better to trap it
		1 => 'flickr shapefiles (2.0); gowanus heights (1.0)'
	);

	$GLOBALS['cfg']['reverse_geocode_endpoints_sources'] = array(
		'neighbourhoods' => 1,
		'localities' => 1,
		# 'countries' => 1,
	);

	$GLOBALS['cfg']['reverse_geocode_default_filter'] = 'neighbourhoods';

	# Get latlon / geocoder stuff

	$GLOBALS['cfg']['enable_feature_getlatlon'] = 0;
	$GLOBALS['cfg']['enable_feature_geocoder'] = 0;

	$GLOBALS['cfg']['twofishes_endpoint'] = 'http://localhost:8081';

	# WOEDB static files

	$GLOBALS['cfg']['enable_feature_woedb_static'] = 0;

	$GLOBALS['cfg']['woedb_static_url_template'] = "http://example.com/woe/{W}/geojson/";
	$GLOBALS['cfg']['woedb_static_path'] = '';

	# Privacy stuff

	$GLOBALS['cfg']['enable_feature_show_users'] = 0;

	$GLOBALS['cfg']['enable_feature_record_ip_address'] = 0;
	$GLOBALS['cfg']['enable_feature_show_ip_address'] = 0;

	# API methods and "blessings" are defined at the bottom

	# API feature flags

	$GLOBALS['cfg']['enable_feature_api'] = 0;

	$GLOBALS['cfg']['enable_feature_api_documentation'] = 1;
	$GLOBALS['cfg']['enable_feature_api_logging'] = 1;
	$GLOBALS['cfg']['enable_feature_api_throttling'] = 0;

	$GLOBALS['cfg']['enable_feature_api_require_keys'] = 0;		# because oauth2...
	$GLOBALS['cfg']['enable_feature_api_register_keys'] = 1;

	$GLOBALS['cfg']['enable_feature_api_delegated_auth'] = 1;
	$GLOBALS['cfg']['enable_feature_api_authenticate_self'] = 1;

	# API URLs and endpoints

	# $GLOBALS['cfg']['site_abs_root_url'] = '';

	$GLOBALS['cfg']['api_require_ssl'] = 1;
	$GLOBALS['cfg']['api_subdomain'] = 'api';

	$GLOBALS['cfg']['api_server_scheme'] = ($GLOBALS['cfg']['api_require_ssl']) ? 'https' : 'http';
	$GLOBALS['cfg']['api_server_name'] = parse_url($GLOBALS['cfg']['abs_root_url'], 1);

	# If I have an API specific subdomain/prefix then check to see if I am already
	# running on that host; if not then update the 'api_server_name' config

	if (($GLOBALS['cfg']['api_subdomain']) && (! preg_match("/^{$GLOBALS['cfg']['api_subdomain']}\.(?:.*)/", $GLOBALS['cfg']['api_server_name']))){
		$GLOBALS['cfg']['api_server_name'] = $GLOBALS['cfg']['api_subdomain'] . "." . $GLOBALS['cfg']['api_server_name'];
	}

	# Build the 'api_abs_root_url' based on everything above

	$GLOBALS['cfg']['api_abs_root_url'] = "{$GLOBALS['cfg']['api_server_scheme']}://{$GLOBALS['cfg']['api_server_name']}" . "/";

	# If I have an API specific subdomain/prefix then check to see if I am already
	# running on that host; if I am then update the 'site_abs_root_url' config and
	# use it in your code accordingly.

	if (($GLOBALS['cfg']['api_subdomain']) && (preg_match("/{$GLOBALS['cfg']['api_subdomain']}\.(?:.*)/", $GLOBALS['cfg']['api_server_name']))){
		$GLOBALS['cfg']['site_abs_root_url'] = str_replace("{$GLOBALS['cfg']['api_subdomain']}.", "", $GLOBALS['cfg']['abs_root_url']);
	}

	else {
		$GLOBALS['cfg']['site_abs_root_url'] = $GLOBALS['cfg']['abs_root_url'];
	}

	$GLOBALS['cfg']['api_auth_type'] = 'oauth2';

	# API pagination

	$GLOBALS['cfg']['api_per_page_default'] = 100;
	$GLOBALS['cfg']['api_per_page_max'] = 500;

	# The actual API config

	$GLOBALS['cfg']['api'] = array(

		# This is maybe what we should move to (20130222/straup)
		# $GLOBALS['cfg']['api_formats'] = array('json');
		# $GLOBALS['cfg']['api_default_format'] = 'json';
		# $GLOBALS['cfg']['api_methods'] = array();

		'formats' => array( 'json' ),
		'default_format' => 'json',

		# We're defining methods using the method_definitions
		# hooks defined below to minimize the clutter in the
		# main config file, aka this one (20130308/straup)
		'methods' => array(),

		# We are NOT doing the same for blessed API keys since
		# it's expected that their number will be small and
		# manageable (20130308/straup)

		'blessings' => array(),
	);

	# Load api methods defined in separate PHP files whose naming
	# convention is FLAMEWORK_INCLUDE_DIR . "/config_api_{$definition}.php";
	#
	# IMPORTANT: This is syntactic sugar and helper code to keep the growing
	# number of API methods out of the main config. Stuff is loaded in to
	# memory in lib_api_config:api_config_init (20130308/straup)

	$GLOBALS['cfg']['api_method_definitions'] = array(
		'methods',
	);

	# Default Flamework stuff

	#
	# Things you'll certainly need to tweak
	#

	# see also: https://github.com/straup/flamework-tools/blob/master/bin/setup-db.sh

	$GLOBALS['cfg']['db_main'] = array(
		'host'	=> 'localhost',
		'user'	=> 'root',
		'pass'	=> 'root',
		'name'	=> 'flamework',
		'auto_connect' => 0,
	);

	$GLOBALS['cfg']['db_users'] = array(

		'host' => array(
			1 => 'localhost',
			2 => 'localhost',
		),

		'user' => 'root',
		'pass' => 'root',

		'name' => array(
			1 => 'user1',
			2 => 'user2',
		),
	);

	# hard coding this URL will ensure it works in cron mode too

	$GLOBALS['cfg']['server_scheme'] = (isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on')) ? 'https' : 'http';
	$GLOBALS['cfg']['server_name'] = isset($_SERVER['SERVER_NAME']) ? $_SERVER['SERVER_NAME'] : 'fake.com';

	$GLOBALS['cfg']['abs_root_url']		= "{$GLOBALS['cfg']['server_scheme']}://{$GLOBALS['cfg']['server_name']}/";
	$GLOBALS['cfg']['safe_abs_root_url']	= $GLOBALS['cfg']['abs_root_url'];

	# Hard-coding these paths will save some stat() ops

	$GLOBALS['cfg']['smarty_template_dir'] = realpath(dirname(__FILE__) . '/../templates/');
	$GLOBALS['cfg']['smarty_compile_dir'] = realpath(dirname(__FILE__) . '/../templates_c/');


	# No, seriously. Change these...

	$GLOBALS['cfg']['crypto_cookie_secret'] = '';
	$GLOBALS['cfg']['crypto_password_secret'] = '';
	$GLOBALS['cfg']['crypto_crumb_secret'] = '';


	#
	# Things you may need to tweak
	#

	# Caching stuff

	$GLOBALS['cfg']['cache_remote_engine'] = '';
	$GLOBALS['cfg']['cache_prefix'] = '';
	$GLOBALS['cfg']['cache_force_refresh'] = 0;

	$GLOBALS['cfg']['memcache_host'] = 'localhost';
	$GLOBALS['cfg']['memcache_port'] = '11211';

	$GLOBALS['cfg']['auth_cookie_domain'] = parse_url($GLOBALS['cfg']['abs_root_url'], 1);
	$GLOBALS['cfg']['auth_cookie_name'] = md5($GLOBALS['cfg']['auth_cookie_domain']) . '-a';
	$GLOBALS['cfg']['auth_cookie_require_https'] = 0;

	$GLOBALS['cfg']['crumb_ttl_default'] = 300;	# seconds

	$GLOBALS['cfg']['rewrite_static_urls'] = array(
		# '/foo' => '/bar/',
	);

	$GLOBALS['cfg']['email_from_name']	= 'flamework app';
	$GLOBALS['cfg']['email_from_email']	= 'admin@ourapp.com';
	$GLOBALS['cfg']['auto_email_args']	= '-fadmin@ourapp.com';

	#
	# Things you can probably not worry about
	#

	$GLOBALS['cfg']['user'] = null;

	# If you are running Flamework on a host where you can not change the permissions
	# on the www/templates_c directory (to be owned by the web server) you'll need to
	# do a couple of things. The first is to set the 'smarty_compile' flag to 0. That
	# means you'll need to pre-compile all your templates by hand. You can do this with
	# 'compile-templates.php' script that is part of Flamework 'bin' directory. Obviously
	# this doesn't make much sense if you are actively developing a site but might be
	# useful if you've got something working and then just want to run it on a shared
	# hosting provider where you can't change the permissions on on files, like pair or
	# dreamhost. (20120110/straup)

	$GLOBALS['cfg']['smarty_compile'] = 1;

	$GLOBALS['cfg']['http_timeout'] = 3;

	$GLOBALS['cfg']['check_notices'] = 1;

	$GLOBALS['cfg']['db_profiling'] = 0;


	#
	# db_enable_poormans_*
	#
	# If enabled, then the relevant database configs and handles
	# will be automagically prepopulated using the relevant information
	# in 'db_main'
	#

	#
	# You should enable/set these flags if you want to
	# use flamework in a setting where you only have access
	# to a single database.
	#

	$GLOBALS['cfg']['db_enable_poormans_federation'] = 1;

	$GLOBALS['cfg']['db_enable_poormans_slaves'] = 0;

	$GLOBALS['cfg']['db_poormans_slaves_user'] = '';
	$GLOBALS['cfg']['db_poormans_slaves_pass'] = '';


	#
	# For when you want to use tickets but can't tweak
	# your my.cnf file or set up a dedicated ticketing
	# server. flamework does not use tickets as part of
	# core (yet) so this is really only necessary if your
	# application needs db tickets.
	#

	$GLOBALS['cfg']['db_enable_poormans_ticketing'] = 1;


	#
	# This will assign $pagination automatically for smarty
	#
	
	$GLOBALS['cfg']['pagination_assign_smarty_variable'] = 1;

	$GLOBALS['cfg']['pagination_per_page'] = 10;
	$GLOBALS['cfg']['pagination_spill'] = 2;
	$GLOBALS['cfg']['pagination_style'] = 'pretty';

	$GLOBALS['cfg']['pagination_keyboard_shortcuts'] = 1;
	$GLOBALS['cfg']['pagination_touch_shortcuts'] = 1;

	#
	# Feature flags
	#

	$GLOBALS['cfg']['enable_feature_signup'] = 1;
	$GLOBALS['cfg']['enable_feature_signin'] = 1;
	$GLOBALS['cfg']['enable_feature_persistent_login'] = 1;
	$GLOBALS['cfg']['enable_feature_account_delete'] = 1;
	$GLOBALS['cfg']['enable_feature_password_retrieval'] = 1;


	#
	# enable this flag to show a full call chain (instead of just the
	# immediate caller) in database query log messages and embedded in
	# the actual SQL sent to the server.
	#

	$GLOBALS['cfg']['db_full_callstack'] = 0;

	$GLOBALS['cfg']['allow_prefetch'] = 0;
